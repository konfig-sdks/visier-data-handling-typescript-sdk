/* tslint:disable */
/* eslint-disable */
/*
Visier Data and Job Handling APIs

Visier APIs for data and job handling

The version of the OpenAPI document: 22222222.99201.1200


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AssignConnectorCredentialRequest } from '../models';
// @ts-ignore
import { AssignConnectorCredentialsResponseDTO } from '../models';
// @ts-ignore
import { CancelJobBatchFromJobIdDTO } from '../models';
// @ts-ignore
import { Connector } from '../models';
// @ts-ignore
import { CredentialCreationAPIResponseDTO } from '../models';
// @ts-ignore
import { DataLoadRequest } from '../models';
// @ts-ignore
import { DataLoadResponse } from '../models';
// @ts-ignore
import { DataProviderAuthInformationDTO } from '../models';
// @ts-ignore
import { DataProviderAuthParamsDTO } from '../models';
// @ts-ignore
import { DataProviderBasicInformationDTO } from '../models';
// @ts-ignore
import { DataProviderBasicMetadataDTO } from '../models';
// @ts-ignore
import { DisableDVModel } from '../models';
// @ts-ignore
import { DisableDVRequest } from '../models';
// @ts-ignore
import { DisableDVResponse } from '../models';
// @ts-ignore
import { DispatchingJobStatusResponse } from '../models';
// @ts-ignore
import { ExcludeDataUploadsRequest } from '../models';
// @ts-ignore
import { ExtractionJobAndStatusResponse } from '../models';
// @ts-ignore
import { ExtractorCredentialsAPIDTO } from '../models';
// @ts-ignore
import { ImportDefinitionsAPIDTO } from '../models';
// @ts-ignore
import { IncludeDataUploadsRequest } from '../models';
// @ts-ignore
import { JobCancellationResultsDTO } from '../models';
// @ts-ignore
import { MapValue } from '../models';
// @ts-ignore
import { MultipleTenantDataVersionsListDTO } from '../models';
// @ts-ignore
import { ProcessingJobAndStatusResponse } from '../models';
// @ts-ignore
import { ProcessingJobStatusResponse } from '../models';
// @ts-ignore
import { ReceivingJobAndStatusResponse } from '../models';
// @ts-ignore
import { ReceivingJobStatusResponse } from '../models';
// @ts-ignore
import { StartExtractionModel } from '../models';
// @ts-ignore
import { StartExtractionRequest } from '../models';
// @ts-ignore
import { StartExtractionResponse } from '../models';
// @ts-ignore
import { Status } from '../models';
// @ts-ignore
import { TenantDataUploadsListResponseDTO } from '../models';
// @ts-ignore
import { TenantDataUploadsUpdateResponseDTO } from '../models';
// @ts-ignore
import { UploadToExcludeModel } from '../models';
// @ts-ignore
import { UploadToIncludeModel } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DataAndJobHandlingApi - axios parameter creator
 * @export
 */
export const DataAndJobHandlingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to assign a connector credential to a data connector.
         * @summary Assign connector credentials to data connectors
         * @param {AssignConnectorCredentialRequest} assignConnectorCredentialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignConnectorCredential: async (assignConnectorCredentialRequest: AssignConnectorCredentialRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignConnectorCredentialRequest' is not null or undefined
            assertParamExists('assignConnectorCredential', 'assignConnectorCredentialRequest', assignConnectorCredentialRequest)
            const localVarPath = `/v1/op/data-connectors/assignCredentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: assignConnectorCredentialRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/data-connectors/assignCredentials',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(assignConnectorCredentialRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to cancel a list of processing jobs, upload jobs, receiving jobs, and extraction jobs.   Note: Receiving jobs with the Running status cannot be cancelled.
         * @summary Cancel a list of jobs
         * @param {CancelJobBatchFromJobIdDTO} cancelJobBatchFromJobIdDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelJobs: async (cancelJobBatchFromJobIdDTO: CancelJobBatchFromJobIdDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cancelJobBatchFromJobIdDTO' is not null or undefined
            assertParamExists('cancelJobs', 'cancelJobBatchFromJobIdDTO', cancelJobBatchFromJobIdDTO)
            const localVarPath = `/v1/op/jobs/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cancelJobBatchFromJobIdDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/jobs/cancel',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cancelJobBatchFromJobIdDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to create connector credentials for a specified tenant. Connector credentials allow Visier to  retrieve data from your source systems through an integration user in the source system.
         * @summary Create a connector credential
         * @param {DataProviderAuthInformationDTO} dataProviderAuthInformationDTO 
         * @param {string} [tenantCode] The tenant code of a specific analytic tenant that you want to create the credential for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConnectorCredential: async (dataProviderAuthInformationDTO: DataProviderAuthInformationDTO, tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataProviderAuthInformationDTO' is not null or undefined
            assertParamExists('createConnectorCredential', 'dataProviderAuthInformationDTO', dataProviderAuthInformationDTO)
            const localVarPath = `/v1/op/data-connector-credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: dataProviderAuthInformationDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/data-connector-credentials',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(dataProviderAuthInformationDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to retrieve a list of the connector credentials in a specified tenant. Connector credentials allow  Visier to retrieve data from your source systems through an integration user in the source system.
         * @summary Retrieve a list of all data connector credentials
         * @param {string} [tenantCode] The tenant code of a specific analytic tenant that you want to retrieve for.
         * @param {number} [limit] The limit to retrieve.
         * @param {number} [start] The index to start retrieving results from, also known as offset. The index begins at 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataConnectorCredentials: async (tenantCode?: string, limit?: number, start?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/op/data-connector-credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/data-connector-credentials',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to retrieve a list of the data connectors in a specified tenant. Data connectors are an alternative  to generating flat files and transferring them to Visier via SFTP.
         * @summary Retrieve a list of all data connectors
         * @param {string} [tenantCode] The tenant code of a specific analytic tenant that you want to retrieve for.
         * @param {number} [limit] The limit to retrieve.
         * @param {number} [start] The index to start retrieving results from, also known as offset. The index begins at 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataConnectors: async (tenantCode?: string, limit?: number, start?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/op/data-connectors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/data-connectors',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to delete connector credentials from your tenants. Credentials that are no longer valid  should be deleted.
         * @summary Delete a connector credential
         * @param {string} [id] The credentialId of the credential you want to delete.
         * @param {string} [tenantCode] The tenant code of the analytic tenant in which the credential you\&#39;re deleting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConnectorCredential: async (id?: string, tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/op/data-connector-credentials/:id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/data-connector-credentials/:id',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * If you discover that a data version is not what is expected after running metric value validation on a data load,  you may want to disable the data version for that processing job.   Use this API to disable the latest enabled data versions for affected analytic tenants or to disable a particular  data version for each analytic tenant.   Note: Disabling an older data version may not have an effect on the state of the solution.
         * @summary Disable data versions for a list of analytic tenants
         * @param {DisableDVRequest} disableDVRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableDV: async (disableDVRequest: DisableDVRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'disableDVRequest' is not null or undefined
            assertParamExists('disableDV', 'disableDVRequest', disableDVRequest)
            const localVarPath = `/v1/op/data-versions/disable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: disableDVRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/data-versions/disable',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(disableDVRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to retrieve the status of a dispatching job, including its job ID and the number of jobs it generated.
         * @summary Retrieve a dispatching job\'s status
         * @param {string} [jobId] The ID of the job you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dispatchingJobStatus: async (jobId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/op/jobs/dispatching-jobs/:jobId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (jobId !== undefined) {
                localVarQueryParameter['jobId'] = jobId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/jobs/dispatching-jobs/:jobId',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to exclude either a specified list of data uploads or all data uploads for each analytic tenant.
         * @summary Exclude data uploads
         * @param {ExcludeDataUploadsRequest} excludeDataUploadsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        excludeDataUplaods: async (excludeDataUploadsRequest: ExcludeDataUploadsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'excludeDataUploadsRequest' is not null or undefined
            assertParamExists('excludeDataUplaods', 'excludeDataUploadsRequest', excludeDataUploadsRequest)
            const localVarPath = `/v1/op/data/uploads/exclude`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: excludeDataUploadsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/data/uploads/exclude',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(excludeDataUploadsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to retrieve the statuses of extraction jobs associated with a dispatching job. The dispatching job  is a \"parent\" to extraction jobs, which retrieve data from your source systems through data connectors.
         * @summary Retrieve a dispatching job\'s extraction jobs with their statuses
         * @param {string} [dispatchingJobId] The ID of the dispatching job that generated the extraction jobs.
         * @param {string} [tenantCode] The tenant code of a specific analytic tenant that you want to retrieve the extraction job status for.  Use this if you are only interested in the results for one analytic tenant.
         * @param {number} [limit] The limit of extraction job statuses to retrieve.
         * @param {number} [start] The index to start retrieving results from, also known as offset. The index begins at 0.
         * @param {string} [jobId] The ID of the dispatching job you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractionJobAndStatus: async (dispatchingJobId?: string, tenantCode?: string, limit?: number, start?: number, jobId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/op/jobs/dispatching-jobs/:jobId/extraction-jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (dispatchingJobId !== undefined) {
                localVarQueryParameter['dispatchingJobId'] = dispatchingJobId;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (jobId !== undefined) {
                localVarQueryParameter['jobId'] = jobId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/jobs/dispatching-jobs/:jobId/extraction-jobs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to include either the specified list of data uploads or all data uploads for each analytic tenant.
         * @summary Include data uploads
         * @param {IncludeDataUploadsRequest} includeDataUploadsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        includeDataUploads: async (includeDataUploadsRequest: IncludeDataUploadsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'includeDataUploadsRequest' is not null or undefined
            assertParamExists('includeDataUploads', 'includeDataUploadsRequest', includeDataUploadsRequest)
            const localVarPath = `/v1/op/data/uploads/include`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: includeDataUploadsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/data/uploads/include',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(includeDataUploadsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to retrieve the list of statuses for a specific job with id `jobId`.
         * @summary Retrieve a specific job\'s status
         * @param {string} [jobId] The unique ID of the job to retrieve the status for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobIdStatus: async (jobId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/op/job-status/jobs/:jobId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (jobId !== undefined) {
                localVarQueryParameter['jobId'] = jobId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/job-status/jobs/:jobId',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to retrieve the list of statuses for all jobs.
         * @summary Retrieve the statuses of all jobs
         * @param {string} [startTime] The start time from which to retrieve job statuses.
         * @param {string} [endTime] The end time from which to retrieve job statuses.
         * @param {string} [status] The specific status to restrict the list of job to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobStatus: async (startTime?: string, endTime?: string, status?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/op/job-status/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/job-status/jobs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * If you discover any inconsistencies after running metric value validation, you may want to find the data versions  causing inconsistencies so you can later disable them.   Use this API to retrieve up to five (5) of the latest enabled data versions for all your analytic tenants or a  single specified analytic tenant.
         * @summary Retrieve the latest enabled data versions for all analytic tenants
         * @param {string} [tenantCode] The tenant code of a specific analytic tenant that you want to retrieve data versions for.  Use this if you are only interested in the results for one analytic tenant.
         * @param {number} [limit] The limit of analytic tenants to retrieve data versions for.  This parameter is not used if the tenantCode parameter is specified.
         * @param {number} [start] The index to start retrieving results from, also known as offset. The index begins at 0.
         * @param {number} [numberOfVersions] The number of latest enabled data versions to retrieve. The maximum value is 5.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        latestEnabledDV: async (tenantCode?: string, limit?: number, start?: number, numberOfVersions?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/op/data-versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (numberOfVersions !== undefined) {
                localVarQueryParameter['numberOfVersions'] = numberOfVersions;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/data-versions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to retrieve the statuses of processing jobs associated with a dispatching job. The dispatching job  is a \"parent\" to extraction jobs, which in turn generate processing jobs and receiving jobs.
         * @summary Retrieve a dispatching job\'s processing jobs with their statuses
         * @param {string} [dispatchingJobId] The ID of the dispatching job that generated the extraction jobs.
         * @param {string} [tenantCode] The tenant code of a specific analytic tenant that you want to retrieve the extraction job status for.  Use this if you are only interested in the results for one analytic tenant.
         * @param {number} [limit] The limit of extraction job statuses to retrieve.
         * @param {number} [start] The index to start retrieving results from, also known as offset. The index begins at 0.
         * @param {string} [jobId] The ID of the dispatching job you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processingJobAndStatus: async (dispatchingJobId?: string, tenantCode?: string, limit?: number, start?: number, jobId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/op/jobs/dispatching-jobs/:jobId/processing-jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (dispatchingJobId !== undefined) {
                localVarQueryParameter['dispatchingJobId'] = dispatchingJobId;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (jobId !== undefined) {
                localVarQueryParameter['jobId'] = jobId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/jobs/dispatching-jobs/:jobId/processing-jobs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to retrieve a list of statuses for all processing jobs associated with the given receiving job ID.  Processing jobs deal with an individual analytic tenant\'s data load. A processing job is either triggered through  the UI or is one of many processing jobs spawned from a receiving job. When a processing job is triggered as part  of a set from an receiving job, it is associated to the receiving job through a Parent ID.
         * @summary Retrieve processing job statuses by receiving job ID
         * @param {string} [tenantCode] The tenant code of the tenant you want to retrieve the processing jobs for.  Use this if you are only interested in the results for one analytic tenant.
         * @param {number} [limit] The limit of processing jobs to retrieve per page.
         * @param {number} [start] The index to start retrieving results from, also known as offset. The index begins at 0.
         * @param {string} [receivingJobId] The receiving job ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processingJobStatus: async (tenantCode?: string, limit?: number, start?: number, receivingJobId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/op/jobs/processing-jobs/:receivingJobId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (receivingJobId !== undefined) {
                localVarQueryParameter['receivingJobId'] = receivingJobId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/jobs/processing-jobs/:receivingJobId',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to retrieve the statuses of receiving jobs associated with a dispatching job. The dispatching job  is a \"parent\" to extraction jobs, which in turn generate processing jobs and receiving jobs.
         * @summary Retrieve a dispatching job\'s receiving jobs with their statuses
         * @param {string} [dispatchingJobId] The ID of the dispatching job that generated the extraction jobs.
         * @param {string} [tenantCode] The tenant code of a specific analytic tenant that you want to retrieve the extraction job status for.  Use this if you are only interested in the results for one analytic tenant.
         * @param {number} [limit] The limit of extraction job statuses to retrieve.
         * @param {number} [start] The index to start retrieving results from, also known as offset. The index begins at 0.
         * @param {string} [jobId] The ID of the dispatching job you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivingJobAndStatus: async (dispatchingJobId?: string, tenantCode?: string, limit?: number, start?: number, jobId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/op/jobs/dispatching-jobs/:jobId/receiving-jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (dispatchingJobId !== undefined) {
                localVarQueryParameter['dispatchingJobId'] = dispatchingJobId;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (jobId !== undefined) {
                localVarQueryParameter['jobId'] = jobId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/jobs/dispatching-jobs/:jobId/receiving-jobs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * After sending data to Visier, you may want to know the status of the receiving job and the associated tenant  receiving jobs. A receiving job validates the transferred data and adds the transferred data to Visier\'s data  store.   Use this API to retrieve the receiving job status and summary of analytic tenant receiving jobs.
         * @summary Retrieve a receiving job\'s status
         * @param {boolean} [jobs] If \&quot;true\&quot;, returns the status of receiving jobs spawned by the receiving job specified by jobId.
         * @param {string} [tenantCode] The tenant code of the tenant you want to retrieve the receiving jobs for. Use this if you are only interested  in the results for one analytic tenant.
         * @param {number} [start] The index to start retrieving results from, also known as offset. The index begins at 0.
         * @param {number} [limit] The number of job statuses to return per page.
         * @param {string} [receivingJobId] The jobId provided after sending data to Visier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivingJobStatus: async (jobs?: boolean, tenantCode?: string, start?: number, limit?: number, receivingJobId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/op/jobs/receiving-jobs/:receivingJobId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (jobs !== undefined) {
                localVarQueryParameter['jobs'] = jobs;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (receivingJobId !== undefined) {
                localVarQueryParameter['receivingJobId'] = receivingJobId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/jobs/receiving-jobs/:receivingJobId',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to retrieve the data uploads and whether they\'re included in one of:  - A list of analytic tenants managed by you.  - A single specified analytic tenant.  - An upload job.
         * @summary Retrieve data uploads
         * @param {string} [uploadJobId] The job ID of an upload job. Use this if you are interested in the data uploads for a specific upload job.
         * @param {number} [tenantCode] The tenant code of a specific analytic tenant that you want to retrieve the data uploads for.
         * @param {number} [limit] The limit of analytic tenants to retrieve data uploads for. This parameter is not used if the tenantCode parameter is specified.
         * @param {number} [start] The index to start retrieving results from, also known as offset. The index begins at 0.
         * @param {number} [numberOfDataUploads] The maximum number of latest enabled data uploads to retrieve for each analytic tenant. The maximum value is 5.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDataUploads: async (uploadJobId?: string, tenantCode?: number, limit?: number, start?: number, numberOfDataUploads?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/op/data/uploads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (uploadJobId !== undefined) {
                localVarQueryParameter['uploadJobId'] = uploadJobId;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (numberOfDataUploads !== undefined) {
                localVarQueryParameter['numberOfDataUploads'] = numberOfDataUploads;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/data/uploads',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to generate extraction jobs for a list of analytic tenants or for the administrating tenant.  This API creates a dispatching job that generates one extraction job per tenant. The extraction jobs retrieve  data from your source systems through data connectors. The dispatching job is the \"parent\" of the extraction  jobs and its job ID is returned in the response.
         * @summary Trigger extraction jobs
         * @param {StartExtractionRequest} startExtractionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startExtraction: async (startExtractionRequest: StartExtractionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startExtractionRequest' is not null or undefined
            assertParamExists('startExtraction', 'startExtractionRequest', startExtractionRequest)
            const localVarPath = `/v1/op/data/startExtractAndLoad`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: startExtractionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/data/startExtractAndLoad',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(startExtractionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API starts the data load process for all analytic tenants included in the specified data files uploaded  to the Visier SFTP server. On success, you receive a job ID that can be filtered and searched for within the  Jobs room in Visier. This job ID is associated with the receiving job, and related to all processing jobs that  spawn for each analytic tenant.   With the job ID, you can also call the next two APIs to retrieve the status of the receiving job and the status  list of all related processing jobs.   **Prerequisite:** You must first obtain Visier\'s public encryption key and upload the source data files to Visier\'s  SFTP server. Files must have a .zip.gpg extension, meaning the files are encrypted using the PGP protocol and compressed.   Visier provides SFTP server credentials and instructions. You can find the encryption key at https://www.visier.com/pgp/visier.public.pgp.asc.  After downloading the file, open the file in a text editor or by dragging it into your browser.   **Note:**   - To see the full status of all analytic tenant data loads, navigate to the Jobs room in a project.   - For performance and efficiency, Visier requires that the uncompressed batch file size is below 5 GB and that no     more than 5000 tenants are included in a batch.
         * @summary Start the data load for an analytic tenant
         * @param {DataLoadRequest} dataLoadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startLoad: async (dataLoadRequest: DataLoadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataLoadRequest' is not null or undefined
            assertParamExists('startLoad', 'dataLoadRequest', dataLoadRequest)
            const localVarPath = `/v1/op/data/startload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: dataLoadRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/data/startload',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(dataLoadRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataAndJobHandlingApi - functional programming interface
 * @export
 */
export const DataAndJobHandlingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataAndJobHandlingApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to assign a connector credential to a data connector.
         * @summary Assign connector credentials to data connectors
         * @param {DataAndJobHandlingApiAssignConnectorCredentialRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignConnectorCredential(requestParameters: DataAndJobHandlingApiAssignConnectorCredentialRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignConnectorCredentialsResponseDTO>> {
            const assignConnectorCredentialRequest: AssignConnectorCredentialRequest = {
                connectors: requestParameters.connectors
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignConnectorCredential(assignConnectorCredentialRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to cancel a list of processing jobs, upload jobs, receiving jobs, and extraction jobs.   Note: Receiving jobs with the Running status cannot be cancelled.
         * @summary Cancel a list of jobs
         * @param {DataAndJobHandlingApiCancelJobsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelJobs(requestParameters: DataAndJobHandlingApiCancelJobsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobCancellationResultsDTO>> {
            const cancelJobBatchFromJobIdDTO: CancelJobBatchFromJobIdDTO = {
                jobIds: requestParameters.jobIds
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelJobs(cancelJobBatchFromJobIdDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to create connector credentials for a specified tenant. Connector credentials allow Visier to  retrieve data from your source systems through an integration user in the source system.
         * @summary Create a connector credential
         * @param {DataAndJobHandlingApiCreateConnectorCredentialRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConnectorCredential(requestParameters: DataAndJobHandlingApiCreateConnectorCredentialRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialCreationAPIResponseDTO>> {
            const dataProviderAuthInformationDTO: DataProviderAuthInformationDTO = {
                dataProviderAuthParams: requestParameters.dataProviderAuthParams,
                dataProviderBasicInformation: requestParameters.dataProviderBasicInformation,
                dataProviderMetadata: requestParameters.dataProviderMetadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConnectorCredential(dataProviderAuthInformationDTO, requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to retrieve a list of the connector credentials in a specified tenant. Connector credentials allow  Visier to retrieve data from your source systems through an integration user in the source system.
         * @summary Retrieve a list of all data connector credentials
         * @param {DataAndJobHandlingApiDataConnectorCredentialsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dataConnectorCredentials(requestParameters: DataAndJobHandlingApiDataConnectorCredentialsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExtractorCredentialsAPIDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dataConnectorCredentials(requestParameters.tenantCode, requestParameters.limit, requestParameters.start, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to retrieve a list of the data connectors in a specified tenant. Data connectors are an alternative  to generating flat files and transferring them to Visier via SFTP.
         * @summary Retrieve a list of all data connectors
         * @param {DataAndJobHandlingApiDataConnectorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dataConnectors(requestParameters: DataAndJobHandlingApiDataConnectorsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportDefinitionsAPIDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dataConnectors(requestParameters.tenantCode, requestParameters.limit, requestParameters.start, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to delete connector credentials from your tenants. Credentials that are no longer valid  should be deleted.
         * @summary Delete a connector credential
         * @param {DataAndJobHandlingApiDeleteConnectorCredentialRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteConnectorCredential(requestParameters: DataAndJobHandlingApiDeleteConnectorCredentialRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConnectorCredential(requestParameters.id, requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * If you discover that a data version is not what is expected after running metric value validation on a data load,  you may want to disable the data version for that processing job.   Use this API to disable the latest enabled data versions for affected analytic tenants or to disable a particular  data version for each analytic tenant.   Note: Disabling an older data version may not have an effect on the state of the solution.
         * @summary Disable data versions for a list of analytic tenants
         * @param {DataAndJobHandlingApiDisableDVRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disableDV(requestParameters: DataAndJobHandlingApiDisableDVRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DisableDVResponse>> {
            const disableDVRequest: DisableDVRequest = {
                model: requestParameters.model
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.disableDV(disableDVRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to retrieve the status of a dispatching job, including its job ID and the number of jobs it generated.
         * @summary Retrieve a dispatching job\'s status
         * @param {DataAndJobHandlingApiDispatchingJobStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dispatchingJobStatus(requestParameters: DataAndJobHandlingApiDispatchingJobStatusRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DispatchingJobStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dispatchingJobStatus(requestParameters.jobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to exclude either a specified list of data uploads or all data uploads for each analytic tenant.
         * @summary Exclude data uploads
         * @param {DataAndJobHandlingApiExcludeDataUplaodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async excludeDataUplaods(requestParameters: DataAndJobHandlingApiExcludeDataUplaodsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantDataUploadsUpdateResponseDTO>> {
            const excludeDataUploadsRequest: ExcludeDataUploadsRequest = {
                model: requestParameters.model
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.excludeDataUplaods(excludeDataUploadsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to retrieve the statuses of extraction jobs associated with a dispatching job. The dispatching job  is a \"parent\" to extraction jobs, which retrieve data from your source systems through data connectors.
         * @summary Retrieve a dispatching job\'s extraction jobs with their statuses
         * @param {DataAndJobHandlingApiExtractionJobAndStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extractionJobAndStatus(requestParameters: DataAndJobHandlingApiExtractionJobAndStatusRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExtractionJobAndStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extractionJobAndStatus(requestParameters.dispatchingJobId, requestParameters.tenantCode, requestParameters.limit, requestParameters.start, requestParameters.jobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to include either the specified list of data uploads or all data uploads for each analytic tenant.
         * @summary Include data uploads
         * @param {DataAndJobHandlingApiIncludeDataUploadsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async includeDataUploads(requestParameters: DataAndJobHandlingApiIncludeDataUploadsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantDataUploadsUpdateResponseDTO>> {
            const includeDataUploadsRequest: IncludeDataUploadsRequest = {
                model: requestParameters.model
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.includeDataUploads(includeDataUploadsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to retrieve the list of statuses for a specific job with id `jobId`.
         * @summary Retrieve a specific job\'s status
         * @param {DataAndJobHandlingApiJobIdStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobIdStatus(requestParameters: DataAndJobHandlingApiJobIdStatusRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceivingJobStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobIdStatus(requestParameters.jobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to retrieve the list of statuses for all jobs.
         * @summary Retrieve the statuses of all jobs
         * @param {DataAndJobHandlingApiJobStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobStatus(requestParameters: DataAndJobHandlingApiJobStatusRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceivingJobStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobStatus(requestParameters.startTime, requestParameters.endTime, requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * If you discover any inconsistencies after running metric value validation, you may want to find the data versions  causing inconsistencies so you can later disable them.   Use this API to retrieve up to five (5) of the latest enabled data versions for all your analytic tenants or a  single specified analytic tenant.
         * @summary Retrieve the latest enabled data versions for all analytic tenants
         * @param {DataAndJobHandlingApiLatestEnabledDVRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async latestEnabledDV(requestParameters: DataAndJobHandlingApiLatestEnabledDVRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MultipleTenantDataVersionsListDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.latestEnabledDV(requestParameters.tenantCode, requestParameters.limit, requestParameters.start, requestParameters.numberOfVersions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to retrieve the statuses of processing jobs associated with a dispatching job. The dispatching job  is a \"parent\" to extraction jobs, which in turn generate processing jobs and receiving jobs.
         * @summary Retrieve a dispatching job\'s processing jobs with their statuses
         * @param {DataAndJobHandlingApiProcessingJobAndStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processingJobAndStatus(requestParameters: DataAndJobHandlingApiProcessingJobAndStatusRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessingJobAndStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processingJobAndStatus(requestParameters.dispatchingJobId, requestParameters.tenantCode, requestParameters.limit, requestParameters.start, requestParameters.jobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to retrieve a list of statuses for all processing jobs associated with the given receiving job ID.  Processing jobs deal with an individual analytic tenant\'s data load. A processing job is either triggered through  the UI or is one of many processing jobs spawned from a receiving job. When a processing job is triggered as part  of a set from an receiving job, it is associated to the receiving job through a Parent ID.
         * @summary Retrieve processing job statuses by receiving job ID
         * @param {DataAndJobHandlingApiProcessingJobStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processingJobStatus(requestParameters: DataAndJobHandlingApiProcessingJobStatusRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessingJobStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processingJobStatus(requestParameters.tenantCode, requestParameters.limit, requestParameters.start, requestParameters.receivingJobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to retrieve the statuses of receiving jobs associated with a dispatching job. The dispatching job  is a \"parent\" to extraction jobs, which in turn generate processing jobs and receiving jobs.
         * @summary Retrieve a dispatching job\'s receiving jobs with their statuses
         * @param {DataAndJobHandlingApiReceivingJobAndStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivingJobAndStatus(requestParameters: DataAndJobHandlingApiReceivingJobAndStatusRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceivingJobAndStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivingJobAndStatus(requestParameters.dispatchingJobId, requestParameters.tenantCode, requestParameters.limit, requestParameters.start, requestParameters.jobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * After sending data to Visier, you may want to know the status of the receiving job and the associated tenant  receiving jobs. A receiving job validates the transferred data and adds the transferred data to Visier\'s data  store.   Use this API to retrieve the receiving job status and summary of analytic tenant receiving jobs.
         * @summary Retrieve a receiving job\'s status
         * @param {DataAndJobHandlingApiReceivingJobStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivingJobStatus(requestParameters: DataAndJobHandlingApiReceivingJobStatusRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceivingJobStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivingJobStatus(requestParameters.jobs, requestParameters.tenantCode, requestParameters.start, requestParameters.limit, requestParameters.receivingJobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to retrieve the data uploads and whether they\'re included in one of:  - A list of analytic tenants managed by you.  - A single specified analytic tenant.  - An upload job.
         * @summary Retrieve data uploads
         * @param {DataAndJobHandlingApiRetrieveDataUploadsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveDataUploads(requestParameters: DataAndJobHandlingApiRetrieveDataUploadsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantDataUploadsListResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveDataUploads(requestParameters.uploadJobId, requestParameters.tenantCode, requestParameters.limit, requestParameters.start, requestParameters.numberOfDataUploads, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to generate extraction jobs for a list of analytic tenants or for the administrating tenant.  This API creates a dispatching job that generates one extraction job per tenant. The extraction jobs retrieve  data from your source systems through data connectors. The dispatching job is the \"parent\" of the extraction  jobs and its job ID is returned in the response.
         * @summary Trigger extraction jobs
         * @param {DataAndJobHandlingApiStartExtractionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startExtraction(requestParameters: DataAndJobHandlingApiStartExtractionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StartExtractionResponse>> {
            const startExtractionRequest: StartExtractionRequest = {
                model: requestParameters.model
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.startExtraction(startExtractionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API starts the data load process for all analytic tenants included in the specified data files uploaded  to the Visier SFTP server. On success, you receive a job ID that can be filtered and searched for within the  Jobs room in Visier. This job ID is associated with the receiving job, and related to all processing jobs that  spawn for each analytic tenant.   With the job ID, you can also call the next two APIs to retrieve the status of the receiving job and the status  list of all related processing jobs.   **Prerequisite:** You must first obtain Visier\'s public encryption key and upload the source data files to Visier\'s  SFTP server. Files must have a .zip.gpg extension, meaning the files are encrypted using the PGP protocol and compressed.   Visier provides SFTP server credentials and instructions. You can find the encryption key at https://www.visier.com/pgp/visier.public.pgp.asc.  After downloading the file, open the file in a text editor or by dragging it into your browser.   **Note:**   - To see the full status of all analytic tenant data loads, navigate to the Jobs room in a project.   - For performance and efficiency, Visier requires that the uncompressed batch file size is below 5 GB and that no     more than 5000 tenants are included in a batch.
         * @summary Start the data load for an analytic tenant
         * @param {DataAndJobHandlingApiStartLoadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startLoad(requestParameters: DataAndJobHandlingApiStartLoadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataLoadResponse>> {
            const dataLoadRequest: DataLoadRequest = {
                model: requestParameters.model
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.startLoad(dataLoadRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataAndJobHandlingApi - factory interface
 * @export
 */
export const DataAndJobHandlingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataAndJobHandlingApiFp(configuration)
    return {
        /**
         * This API allows you to assign a connector credential to a data connector.
         * @summary Assign connector credentials to data connectors
         * @param {DataAndJobHandlingApiAssignConnectorCredentialRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignConnectorCredential(requestParameters: DataAndJobHandlingApiAssignConnectorCredentialRequest, options?: AxiosRequestConfig): AxiosPromise<AssignConnectorCredentialsResponseDTO> {
            return localVarFp.assignConnectorCredential(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to cancel a list of processing jobs, upload jobs, receiving jobs, and extraction jobs.   Note: Receiving jobs with the Running status cannot be cancelled.
         * @summary Cancel a list of jobs
         * @param {DataAndJobHandlingApiCancelJobsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelJobs(requestParameters: DataAndJobHandlingApiCancelJobsRequest, options?: AxiosRequestConfig): AxiosPromise<JobCancellationResultsDTO> {
            return localVarFp.cancelJobs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to create connector credentials for a specified tenant. Connector credentials allow Visier to  retrieve data from your source systems through an integration user in the source system.
         * @summary Create a connector credential
         * @param {DataAndJobHandlingApiCreateConnectorCredentialRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConnectorCredential(requestParameters: DataAndJobHandlingApiCreateConnectorCredentialRequest, options?: AxiosRequestConfig): AxiosPromise<CredentialCreationAPIResponseDTO> {
            return localVarFp.createConnectorCredential(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to retrieve a list of the connector credentials in a specified tenant. Connector credentials allow  Visier to retrieve data from your source systems through an integration user in the source system.
         * @summary Retrieve a list of all data connector credentials
         * @param {DataAndJobHandlingApiDataConnectorCredentialsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataConnectorCredentials(requestParameters: DataAndJobHandlingApiDataConnectorCredentialsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ExtractorCredentialsAPIDTO> {
            return localVarFp.dataConnectorCredentials(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to retrieve a list of the data connectors in a specified tenant. Data connectors are an alternative  to generating flat files and transferring them to Visier via SFTP.
         * @summary Retrieve a list of all data connectors
         * @param {DataAndJobHandlingApiDataConnectorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataConnectors(requestParameters: DataAndJobHandlingApiDataConnectorsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ImportDefinitionsAPIDTO> {
            return localVarFp.dataConnectors(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to delete connector credentials from your tenants. Credentials that are no longer valid  should be deleted.
         * @summary Delete a connector credential
         * @param {DataAndJobHandlingApiDeleteConnectorCredentialRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConnectorCredential(requestParameters: DataAndJobHandlingApiDeleteConnectorCredentialRequest = {}, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteConnectorCredential(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * If you discover that a data version is not what is expected after running metric value validation on a data load,  you may want to disable the data version for that processing job.   Use this API to disable the latest enabled data versions for affected analytic tenants or to disable a particular  data version for each analytic tenant.   Note: Disabling an older data version may not have an effect on the state of the solution.
         * @summary Disable data versions for a list of analytic tenants
         * @param {DataAndJobHandlingApiDisableDVRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableDV(requestParameters: DataAndJobHandlingApiDisableDVRequest, options?: AxiosRequestConfig): AxiosPromise<DisableDVResponse> {
            return localVarFp.disableDV(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to retrieve the status of a dispatching job, including its job ID and the number of jobs it generated.
         * @summary Retrieve a dispatching job\'s status
         * @param {DataAndJobHandlingApiDispatchingJobStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dispatchingJobStatus(requestParameters: DataAndJobHandlingApiDispatchingJobStatusRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DispatchingJobStatusResponse> {
            return localVarFp.dispatchingJobStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to exclude either a specified list of data uploads or all data uploads for each analytic tenant.
         * @summary Exclude data uploads
         * @param {DataAndJobHandlingApiExcludeDataUplaodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        excludeDataUplaods(requestParameters: DataAndJobHandlingApiExcludeDataUplaodsRequest, options?: AxiosRequestConfig): AxiosPromise<TenantDataUploadsUpdateResponseDTO> {
            return localVarFp.excludeDataUplaods(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to retrieve the statuses of extraction jobs associated with a dispatching job. The dispatching job  is a \"parent\" to extraction jobs, which retrieve data from your source systems through data connectors.
         * @summary Retrieve a dispatching job\'s extraction jobs with their statuses
         * @param {DataAndJobHandlingApiExtractionJobAndStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractionJobAndStatus(requestParameters: DataAndJobHandlingApiExtractionJobAndStatusRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ExtractionJobAndStatusResponse> {
            return localVarFp.extractionJobAndStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to include either the specified list of data uploads or all data uploads for each analytic tenant.
         * @summary Include data uploads
         * @param {DataAndJobHandlingApiIncludeDataUploadsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        includeDataUploads(requestParameters: DataAndJobHandlingApiIncludeDataUploadsRequest, options?: AxiosRequestConfig): AxiosPromise<TenantDataUploadsUpdateResponseDTO> {
            return localVarFp.includeDataUploads(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to retrieve the list of statuses for a specific job with id `jobId`.
         * @summary Retrieve a specific job\'s status
         * @param {DataAndJobHandlingApiJobIdStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobIdStatus(requestParameters: DataAndJobHandlingApiJobIdStatusRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ReceivingJobStatusResponse> {
            return localVarFp.jobIdStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to retrieve the list of statuses for all jobs.
         * @summary Retrieve the statuses of all jobs
         * @param {DataAndJobHandlingApiJobStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobStatus(requestParameters: DataAndJobHandlingApiJobStatusRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ReceivingJobStatusResponse> {
            return localVarFp.jobStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * If you discover any inconsistencies after running metric value validation, you may want to find the data versions  causing inconsistencies so you can later disable them.   Use this API to retrieve up to five (5) of the latest enabled data versions for all your analytic tenants or a  single specified analytic tenant.
         * @summary Retrieve the latest enabled data versions for all analytic tenants
         * @param {DataAndJobHandlingApiLatestEnabledDVRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        latestEnabledDV(requestParameters: DataAndJobHandlingApiLatestEnabledDVRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MultipleTenantDataVersionsListDTO> {
            return localVarFp.latestEnabledDV(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to retrieve the statuses of processing jobs associated with a dispatching job. The dispatching job  is a \"parent\" to extraction jobs, which in turn generate processing jobs and receiving jobs.
         * @summary Retrieve a dispatching job\'s processing jobs with their statuses
         * @param {DataAndJobHandlingApiProcessingJobAndStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processingJobAndStatus(requestParameters: DataAndJobHandlingApiProcessingJobAndStatusRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ProcessingJobAndStatusResponse> {
            return localVarFp.processingJobAndStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to retrieve a list of statuses for all processing jobs associated with the given receiving job ID.  Processing jobs deal with an individual analytic tenant\'s data load. A processing job is either triggered through  the UI or is one of many processing jobs spawned from a receiving job. When a processing job is triggered as part  of a set from an receiving job, it is associated to the receiving job through a Parent ID.
         * @summary Retrieve processing job statuses by receiving job ID
         * @param {DataAndJobHandlingApiProcessingJobStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processingJobStatus(requestParameters: DataAndJobHandlingApiProcessingJobStatusRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ProcessingJobStatusResponse> {
            return localVarFp.processingJobStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to retrieve the statuses of receiving jobs associated with a dispatching job. The dispatching job  is a \"parent\" to extraction jobs, which in turn generate processing jobs and receiving jobs.
         * @summary Retrieve a dispatching job\'s receiving jobs with their statuses
         * @param {DataAndJobHandlingApiReceivingJobAndStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivingJobAndStatus(requestParameters: DataAndJobHandlingApiReceivingJobAndStatusRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ReceivingJobAndStatusResponse> {
            return localVarFp.receivingJobAndStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * After sending data to Visier, you may want to know the status of the receiving job and the associated tenant  receiving jobs. A receiving job validates the transferred data and adds the transferred data to Visier\'s data  store.   Use this API to retrieve the receiving job status and summary of analytic tenant receiving jobs.
         * @summary Retrieve a receiving job\'s status
         * @param {DataAndJobHandlingApiReceivingJobStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivingJobStatus(requestParameters: DataAndJobHandlingApiReceivingJobStatusRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ReceivingJobStatusResponse> {
            return localVarFp.receivingJobStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to retrieve the data uploads and whether they\'re included in one of:  - A list of analytic tenants managed by you.  - A single specified analytic tenant.  - An upload job.
         * @summary Retrieve data uploads
         * @param {DataAndJobHandlingApiRetrieveDataUploadsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDataUploads(requestParameters: DataAndJobHandlingApiRetrieveDataUploadsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TenantDataUploadsListResponseDTO> {
            return localVarFp.retrieveDataUploads(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to generate extraction jobs for a list of analytic tenants or for the administrating tenant.  This API creates a dispatching job that generates one extraction job per tenant. The extraction jobs retrieve  data from your source systems through data connectors. The dispatching job is the \"parent\" of the extraction  jobs and its job ID is returned in the response.
         * @summary Trigger extraction jobs
         * @param {DataAndJobHandlingApiStartExtractionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startExtraction(requestParameters: DataAndJobHandlingApiStartExtractionRequest, options?: AxiosRequestConfig): AxiosPromise<StartExtractionResponse> {
            return localVarFp.startExtraction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API starts the data load process for all analytic tenants included in the specified data files uploaded  to the Visier SFTP server. On success, you receive a job ID that can be filtered and searched for within the  Jobs room in Visier. This job ID is associated with the receiving job, and related to all processing jobs that  spawn for each analytic tenant.   With the job ID, you can also call the next two APIs to retrieve the status of the receiving job and the status  list of all related processing jobs.   **Prerequisite:** You must first obtain Visier\'s public encryption key and upload the source data files to Visier\'s  SFTP server. Files must have a .zip.gpg extension, meaning the files are encrypted using the PGP protocol and compressed.   Visier provides SFTP server credentials and instructions. You can find the encryption key at https://www.visier.com/pgp/visier.public.pgp.asc.  After downloading the file, open the file in a text editor or by dragging it into your browser.   **Note:**   - To see the full status of all analytic tenant data loads, navigate to the Jobs room in a project.   - For performance and efficiency, Visier requires that the uncompressed batch file size is below 5 GB and that no     more than 5000 tenants are included in a batch.
         * @summary Start the data load for an analytic tenant
         * @param {DataAndJobHandlingApiStartLoadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startLoad(requestParameters: DataAndJobHandlingApiStartLoadRequest, options?: AxiosRequestConfig): AxiosPromise<DataLoadResponse> {
            return localVarFp.startLoad(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for assignConnectorCredential operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiAssignConnectorCredentialRequest
 */
export type DataAndJobHandlingApiAssignConnectorCredentialRequest = {
    
} & AssignConnectorCredentialRequest

/**
 * Request parameters for cancelJobs operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiCancelJobsRequest
 */
export type DataAndJobHandlingApiCancelJobsRequest = {
    
} & CancelJobBatchFromJobIdDTO

/**
 * Request parameters for createConnectorCredential operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiCreateConnectorCredentialRequest
 */
export type DataAndJobHandlingApiCreateConnectorCredentialRequest = {
    
    /**
    * The tenant code of a specific analytic tenant that you want to create the credential for.
    * @type {string}
    * @memberof DataAndJobHandlingApiCreateConnectorCredential
    */
    readonly tenantCode?: string
    
} & DataProviderAuthInformationDTO

/**
 * Request parameters for dataConnectorCredentials operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiDataConnectorCredentialsRequest
 */
export type DataAndJobHandlingApiDataConnectorCredentialsRequest = {
    
    /**
    * The tenant code of a specific analytic tenant that you want to retrieve for.
    * @type {string}
    * @memberof DataAndJobHandlingApiDataConnectorCredentials
    */
    readonly tenantCode?: string
    
    /**
    * The limit to retrieve.
    * @type {number}
    * @memberof DataAndJobHandlingApiDataConnectorCredentials
    */
    readonly limit?: number
    
    /**
    * The index to start retrieving results from, also known as offset. The index begins at 0.
    * @type {number}
    * @memberof DataAndJobHandlingApiDataConnectorCredentials
    */
    readonly start?: number
    
}

/**
 * Request parameters for dataConnectors operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiDataConnectorsRequest
 */
export type DataAndJobHandlingApiDataConnectorsRequest = {
    
    /**
    * The tenant code of a specific analytic tenant that you want to retrieve for.
    * @type {string}
    * @memberof DataAndJobHandlingApiDataConnectors
    */
    readonly tenantCode?: string
    
    /**
    * The limit to retrieve.
    * @type {number}
    * @memberof DataAndJobHandlingApiDataConnectors
    */
    readonly limit?: number
    
    /**
    * The index to start retrieving results from, also known as offset. The index begins at 0.
    * @type {number}
    * @memberof DataAndJobHandlingApiDataConnectors
    */
    readonly start?: number
    
}

/**
 * Request parameters for deleteConnectorCredential operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiDeleteConnectorCredentialRequest
 */
export type DataAndJobHandlingApiDeleteConnectorCredentialRequest = {
    
    /**
    * The credentialId of the credential you want to delete.
    * @type {string}
    * @memberof DataAndJobHandlingApiDeleteConnectorCredential
    */
    readonly id?: string
    
    /**
    * The tenant code of the analytic tenant in which the credential you\'re deleting.
    * @type {string}
    * @memberof DataAndJobHandlingApiDeleteConnectorCredential
    */
    readonly tenantCode?: string
    
}

/**
 * Request parameters for disableDV operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiDisableDVRequest
 */
export type DataAndJobHandlingApiDisableDVRequest = {
    
} & DisableDVRequest

/**
 * Request parameters for dispatchingJobStatus operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiDispatchingJobStatusRequest
 */
export type DataAndJobHandlingApiDispatchingJobStatusRequest = {
    
    /**
    * The ID of the job you want to retrieve.
    * @type {string}
    * @memberof DataAndJobHandlingApiDispatchingJobStatus
    */
    readonly jobId?: string
    
}

/**
 * Request parameters for excludeDataUplaods operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiExcludeDataUplaodsRequest
 */
export type DataAndJobHandlingApiExcludeDataUplaodsRequest = {
    
} & ExcludeDataUploadsRequest

/**
 * Request parameters for extractionJobAndStatus operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiExtractionJobAndStatusRequest
 */
export type DataAndJobHandlingApiExtractionJobAndStatusRequest = {
    
    /**
    * The ID of the dispatching job that generated the extraction jobs.
    * @type {string}
    * @memberof DataAndJobHandlingApiExtractionJobAndStatus
    */
    readonly dispatchingJobId?: string
    
    /**
    * The tenant code of a specific analytic tenant that you want to retrieve the extraction job status for.  Use this if you are only interested in the results for one analytic tenant.
    * @type {string}
    * @memberof DataAndJobHandlingApiExtractionJobAndStatus
    */
    readonly tenantCode?: string
    
    /**
    * The limit of extraction job statuses to retrieve.
    * @type {number}
    * @memberof DataAndJobHandlingApiExtractionJobAndStatus
    */
    readonly limit?: number
    
    /**
    * The index to start retrieving results from, also known as offset. The index begins at 0.
    * @type {number}
    * @memberof DataAndJobHandlingApiExtractionJobAndStatus
    */
    readonly start?: number
    
    /**
    * The ID of the dispatching job you want to retrieve.
    * @type {string}
    * @memberof DataAndJobHandlingApiExtractionJobAndStatus
    */
    readonly jobId?: string
    
}

/**
 * Request parameters for includeDataUploads operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiIncludeDataUploadsRequest
 */
export type DataAndJobHandlingApiIncludeDataUploadsRequest = {
    
} & IncludeDataUploadsRequest

/**
 * Request parameters for jobIdStatus operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiJobIdStatusRequest
 */
export type DataAndJobHandlingApiJobIdStatusRequest = {
    
    /**
    * The unique ID of the job to retrieve the status for.
    * @type {string}
    * @memberof DataAndJobHandlingApiJobIdStatus
    */
    readonly jobId?: string
    
}

/**
 * Request parameters for jobStatus operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiJobStatusRequest
 */
export type DataAndJobHandlingApiJobStatusRequest = {
    
    /**
    * The start time from which to retrieve job statuses.
    * @type {string}
    * @memberof DataAndJobHandlingApiJobStatus
    */
    readonly startTime?: string
    
    /**
    * The end time from which to retrieve job statuses.
    * @type {string}
    * @memberof DataAndJobHandlingApiJobStatus
    */
    readonly endTime?: string
    
    /**
    * The specific status to restrict the list of job to.
    * @type {string}
    * @memberof DataAndJobHandlingApiJobStatus
    */
    readonly status?: string
    
}

/**
 * Request parameters for latestEnabledDV operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiLatestEnabledDVRequest
 */
export type DataAndJobHandlingApiLatestEnabledDVRequest = {
    
    /**
    * The tenant code of a specific analytic tenant that you want to retrieve data versions for.  Use this if you are only interested in the results for one analytic tenant.
    * @type {string}
    * @memberof DataAndJobHandlingApiLatestEnabledDV
    */
    readonly tenantCode?: string
    
    /**
    * The limit of analytic tenants to retrieve data versions for.  This parameter is not used if the tenantCode parameter is specified.
    * @type {number}
    * @memberof DataAndJobHandlingApiLatestEnabledDV
    */
    readonly limit?: number
    
    /**
    * The index to start retrieving results from, also known as offset. The index begins at 0.
    * @type {number}
    * @memberof DataAndJobHandlingApiLatestEnabledDV
    */
    readonly start?: number
    
    /**
    * The number of latest enabled data versions to retrieve. The maximum value is 5.
    * @type {number}
    * @memberof DataAndJobHandlingApiLatestEnabledDV
    */
    readonly numberOfVersions?: number
    
}

/**
 * Request parameters for processingJobAndStatus operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiProcessingJobAndStatusRequest
 */
export type DataAndJobHandlingApiProcessingJobAndStatusRequest = {
    
    /**
    * The ID of the dispatching job that generated the extraction jobs.
    * @type {string}
    * @memberof DataAndJobHandlingApiProcessingJobAndStatus
    */
    readonly dispatchingJobId?: string
    
    /**
    * The tenant code of a specific analytic tenant that you want to retrieve the extraction job status for.  Use this if you are only interested in the results for one analytic tenant.
    * @type {string}
    * @memberof DataAndJobHandlingApiProcessingJobAndStatus
    */
    readonly tenantCode?: string
    
    /**
    * The limit of extraction job statuses to retrieve.
    * @type {number}
    * @memberof DataAndJobHandlingApiProcessingJobAndStatus
    */
    readonly limit?: number
    
    /**
    * The index to start retrieving results from, also known as offset. The index begins at 0.
    * @type {number}
    * @memberof DataAndJobHandlingApiProcessingJobAndStatus
    */
    readonly start?: number
    
    /**
    * The ID of the dispatching job you want to retrieve.
    * @type {string}
    * @memberof DataAndJobHandlingApiProcessingJobAndStatus
    */
    readonly jobId?: string
    
}

/**
 * Request parameters for processingJobStatus operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiProcessingJobStatusRequest
 */
export type DataAndJobHandlingApiProcessingJobStatusRequest = {
    
    /**
    * The tenant code of the tenant you want to retrieve the processing jobs for.  Use this if you are only interested in the results for one analytic tenant.
    * @type {string}
    * @memberof DataAndJobHandlingApiProcessingJobStatus
    */
    readonly tenantCode?: string
    
    /**
    * The limit of processing jobs to retrieve per page.
    * @type {number}
    * @memberof DataAndJobHandlingApiProcessingJobStatus
    */
    readonly limit?: number
    
    /**
    * The index to start retrieving results from, also known as offset. The index begins at 0.
    * @type {number}
    * @memberof DataAndJobHandlingApiProcessingJobStatus
    */
    readonly start?: number
    
    /**
    * The receiving job ID
    * @type {string}
    * @memberof DataAndJobHandlingApiProcessingJobStatus
    */
    readonly receivingJobId?: string
    
}

/**
 * Request parameters for receivingJobAndStatus operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiReceivingJobAndStatusRequest
 */
export type DataAndJobHandlingApiReceivingJobAndStatusRequest = {
    
    /**
    * The ID of the dispatching job that generated the extraction jobs.
    * @type {string}
    * @memberof DataAndJobHandlingApiReceivingJobAndStatus
    */
    readonly dispatchingJobId?: string
    
    /**
    * The tenant code of a specific analytic tenant that you want to retrieve the extraction job status for.  Use this if you are only interested in the results for one analytic tenant.
    * @type {string}
    * @memberof DataAndJobHandlingApiReceivingJobAndStatus
    */
    readonly tenantCode?: string
    
    /**
    * The limit of extraction job statuses to retrieve.
    * @type {number}
    * @memberof DataAndJobHandlingApiReceivingJobAndStatus
    */
    readonly limit?: number
    
    /**
    * The index to start retrieving results from, also known as offset. The index begins at 0.
    * @type {number}
    * @memberof DataAndJobHandlingApiReceivingJobAndStatus
    */
    readonly start?: number
    
    /**
    * The ID of the dispatching job you want to retrieve.
    * @type {string}
    * @memberof DataAndJobHandlingApiReceivingJobAndStatus
    */
    readonly jobId?: string
    
}

/**
 * Request parameters for receivingJobStatus operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiReceivingJobStatusRequest
 */
export type DataAndJobHandlingApiReceivingJobStatusRequest = {
    
    /**
    * If \"true\", returns the status of receiving jobs spawned by the receiving job specified by jobId.
    * @type {boolean}
    * @memberof DataAndJobHandlingApiReceivingJobStatus
    */
    readonly jobs?: boolean
    
    /**
    * The tenant code of the tenant you want to retrieve the receiving jobs for. Use this if you are only interested  in the results for one analytic tenant.
    * @type {string}
    * @memberof DataAndJobHandlingApiReceivingJobStatus
    */
    readonly tenantCode?: string
    
    /**
    * The index to start retrieving results from, also known as offset. The index begins at 0.
    * @type {number}
    * @memberof DataAndJobHandlingApiReceivingJobStatus
    */
    readonly start?: number
    
    /**
    * The number of job statuses to return per page.
    * @type {number}
    * @memberof DataAndJobHandlingApiReceivingJobStatus
    */
    readonly limit?: number
    
    /**
    * The jobId provided after sending data to Visier.
    * @type {string}
    * @memberof DataAndJobHandlingApiReceivingJobStatus
    */
    readonly receivingJobId?: string
    
}

/**
 * Request parameters for retrieveDataUploads operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiRetrieveDataUploadsRequest
 */
export type DataAndJobHandlingApiRetrieveDataUploadsRequest = {
    
    /**
    * The job ID of an upload job. Use this if you are interested in the data uploads for a specific upload job.
    * @type {string}
    * @memberof DataAndJobHandlingApiRetrieveDataUploads
    */
    readonly uploadJobId?: string
    
    /**
    * The tenant code of a specific analytic tenant that you want to retrieve the data uploads for.
    * @type {number}
    * @memberof DataAndJobHandlingApiRetrieveDataUploads
    */
    readonly tenantCode?: number
    
    /**
    * The limit of analytic tenants to retrieve data uploads for. This parameter is not used if the tenantCode parameter is specified.
    * @type {number}
    * @memberof DataAndJobHandlingApiRetrieveDataUploads
    */
    readonly limit?: number
    
    /**
    * The index to start retrieving results from, also known as offset. The index begins at 0.
    * @type {number}
    * @memberof DataAndJobHandlingApiRetrieveDataUploads
    */
    readonly start?: number
    
    /**
    * The maximum number of latest enabled data uploads to retrieve for each analytic tenant. The maximum value is 5.
    * @type {number}
    * @memberof DataAndJobHandlingApiRetrieveDataUploads
    */
    readonly numberOfDataUploads?: number
    
}

/**
 * Request parameters for startExtraction operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiStartExtractionRequest
 */
export type DataAndJobHandlingApiStartExtractionRequest = {
    
} & StartExtractionRequest

/**
 * Request parameters for startLoad operation in DataAndJobHandlingApi.
 * @export
 * @interface DataAndJobHandlingApiStartLoadRequest
 */
export type DataAndJobHandlingApiStartLoadRequest = {
    
} & DataLoadRequest

/**
 * DataAndJobHandlingApiGenerated - object-oriented interface
 * @export
 * @class DataAndJobHandlingApiGenerated
 * @extends {BaseAPI}
 */
export class DataAndJobHandlingApiGenerated extends BaseAPI {
    /**
     * This API allows you to assign a connector credential to a data connector.
     * @summary Assign connector credentials to data connectors
     * @param {DataAndJobHandlingApiAssignConnectorCredentialRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public assignConnectorCredential(requestParameters: DataAndJobHandlingApiAssignConnectorCredentialRequest, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).assignConnectorCredential(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to cancel a list of processing jobs, upload jobs, receiving jobs, and extraction jobs.   Note: Receiving jobs with the Running status cannot be cancelled.
     * @summary Cancel a list of jobs
     * @param {DataAndJobHandlingApiCancelJobsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public cancelJobs(requestParameters: DataAndJobHandlingApiCancelJobsRequest, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).cancelJobs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to create connector credentials for a specified tenant. Connector credentials allow Visier to  retrieve data from your source systems through an integration user in the source system.
     * @summary Create a connector credential
     * @param {DataAndJobHandlingApiCreateConnectorCredentialRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public createConnectorCredential(requestParameters: DataAndJobHandlingApiCreateConnectorCredentialRequest, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).createConnectorCredential(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to retrieve a list of the connector credentials in a specified tenant. Connector credentials allow  Visier to retrieve data from your source systems through an integration user in the source system.
     * @summary Retrieve a list of all data connector credentials
     * @param {DataAndJobHandlingApiDataConnectorCredentialsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public dataConnectorCredentials(requestParameters: DataAndJobHandlingApiDataConnectorCredentialsRequest = {}, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).dataConnectorCredentials(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to retrieve a list of the data connectors in a specified tenant. Data connectors are an alternative  to generating flat files and transferring them to Visier via SFTP.
     * @summary Retrieve a list of all data connectors
     * @param {DataAndJobHandlingApiDataConnectorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public dataConnectors(requestParameters: DataAndJobHandlingApiDataConnectorsRequest = {}, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).dataConnectors(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to delete connector credentials from your tenants. Credentials that are no longer valid  should be deleted.
     * @summary Delete a connector credential
     * @param {DataAndJobHandlingApiDeleteConnectorCredentialRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public deleteConnectorCredential(requestParameters: DataAndJobHandlingApiDeleteConnectorCredentialRequest = {}, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).deleteConnectorCredential(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * If you discover that a data version is not what is expected after running metric value validation on a data load,  you may want to disable the data version for that processing job.   Use this API to disable the latest enabled data versions for affected analytic tenants or to disable a particular  data version for each analytic tenant.   Note: Disabling an older data version may not have an effect on the state of the solution.
     * @summary Disable data versions for a list of analytic tenants
     * @param {DataAndJobHandlingApiDisableDVRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public disableDV(requestParameters: DataAndJobHandlingApiDisableDVRequest, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).disableDV(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to retrieve the status of a dispatching job, including its job ID and the number of jobs it generated.
     * @summary Retrieve a dispatching job\'s status
     * @param {DataAndJobHandlingApiDispatchingJobStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public dispatchingJobStatus(requestParameters: DataAndJobHandlingApiDispatchingJobStatusRequest = {}, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).dispatchingJobStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to exclude either a specified list of data uploads or all data uploads for each analytic tenant.
     * @summary Exclude data uploads
     * @param {DataAndJobHandlingApiExcludeDataUplaodsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public excludeDataUplaods(requestParameters: DataAndJobHandlingApiExcludeDataUplaodsRequest, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).excludeDataUplaods(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to retrieve the statuses of extraction jobs associated with a dispatching job. The dispatching job  is a \"parent\" to extraction jobs, which retrieve data from your source systems through data connectors.
     * @summary Retrieve a dispatching job\'s extraction jobs with their statuses
     * @param {DataAndJobHandlingApiExtractionJobAndStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public extractionJobAndStatus(requestParameters: DataAndJobHandlingApiExtractionJobAndStatusRequest = {}, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).extractionJobAndStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to include either the specified list of data uploads or all data uploads for each analytic tenant.
     * @summary Include data uploads
     * @param {DataAndJobHandlingApiIncludeDataUploadsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public includeDataUploads(requestParameters: DataAndJobHandlingApiIncludeDataUploadsRequest, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).includeDataUploads(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to retrieve the list of statuses for a specific job with id `jobId`.
     * @summary Retrieve a specific job\'s status
     * @param {DataAndJobHandlingApiJobIdStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public jobIdStatus(requestParameters: DataAndJobHandlingApiJobIdStatusRequest = {}, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).jobIdStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to retrieve the list of statuses for all jobs.
     * @summary Retrieve the statuses of all jobs
     * @param {DataAndJobHandlingApiJobStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public jobStatus(requestParameters: DataAndJobHandlingApiJobStatusRequest = {}, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).jobStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * If you discover any inconsistencies after running metric value validation, you may want to find the data versions  causing inconsistencies so you can later disable them.   Use this API to retrieve up to five (5) of the latest enabled data versions for all your analytic tenants or a  single specified analytic tenant.
     * @summary Retrieve the latest enabled data versions for all analytic tenants
     * @param {DataAndJobHandlingApiLatestEnabledDVRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public latestEnabledDV(requestParameters: DataAndJobHandlingApiLatestEnabledDVRequest = {}, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).latestEnabledDV(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to retrieve the statuses of processing jobs associated with a dispatching job. The dispatching job  is a \"parent\" to extraction jobs, which in turn generate processing jobs and receiving jobs.
     * @summary Retrieve a dispatching job\'s processing jobs with their statuses
     * @param {DataAndJobHandlingApiProcessingJobAndStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public processingJobAndStatus(requestParameters: DataAndJobHandlingApiProcessingJobAndStatusRequest = {}, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).processingJobAndStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to retrieve a list of statuses for all processing jobs associated with the given receiving job ID.  Processing jobs deal with an individual analytic tenant\'s data load. A processing job is either triggered through  the UI or is one of many processing jobs spawned from a receiving job. When a processing job is triggered as part  of a set from an receiving job, it is associated to the receiving job through a Parent ID.
     * @summary Retrieve processing job statuses by receiving job ID
     * @param {DataAndJobHandlingApiProcessingJobStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public processingJobStatus(requestParameters: DataAndJobHandlingApiProcessingJobStatusRequest = {}, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).processingJobStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to retrieve the statuses of receiving jobs associated with a dispatching job. The dispatching job  is a \"parent\" to extraction jobs, which in turn generate processing jobs and receiving jobs.
     * @summary Retrieve a dispatching job\'s receiving jobs with their statuses
     * @param {DataAndJobHandlingApiReceivingJobAndStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public receivingJobAndStatus(requestParameters: DataAndJobHandlingApiReceivingJobAndStatusRequest = {}, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).receivingJobAndStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * After sending data to Visier, you may want to know the status of the receiving job and the associated tenant  receiving jobs. A receiving job validates the transferred data and adds the transferred data to Visier\'s data  store.   Use this API to retrieve the receiving job status and summary of analytic tenant receiving jobs.
     * @summary Retrieve a receiving job\'s status
     * @param {DataAndJobHandlingApiReceivingJobStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public receivingJobStatus(requestParameters: DataAndJobHandlingApiReceivingJobStatusRequest = {}, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).receivingJobStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to retrieve the data uploads and whether they\'re included in one of:  - A list of analytic tenants managed by you.  - A single specified analytic tenant.  - An upload job.
     * @summary Retrieve data uploads
     * @param {DataAndJobHandlingApiRetrieveDataUploadsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public retrieveDataUploads(requestParameters: DataAndJobHandlingApiRetrieveDataUploadsRequest = {}, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).retrieveDataUploads(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to generate extraction jobs for a list of analytic tenants or for the administrating tenant.  This API creates a dispatching job that generates one extraction job per tenant. The extraction jobs retrieve  data from your source systems through data connectors. The dispatching job is the \"parent\" of the extraction  jobs and its job ID is returned in the response.
     * @summary Trigger extraction jobs
     * @param {DataAndJobHandlingApiStartExtractionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public startExtraction(requestParameters: DataAndJobHandlingApiStartExtractionRequest, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).startExtraction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API starts the data load process for all analytic tenants included in the specified data files uploaded  to the Visier SFTP server. On success, you receive a job ID that can be filtered and searched for within the  Jobs room in Visier. This job ID is associated with the receiving job, and related to all processing jobs that  spawn for each analytic tenant.   With the job ID, you can also call the next two APIs to retrieve the status of the receiving job and the status  list of all related processing jobs.   **Prerequisite:** You must first obtain Visier\'s public encryption key and upload the source data files to Visier\'s  SFTP server. Files must have a .zip.gpg extension, meaning the files are encrypted using the PGP protocol and compressed.   Visier provides SFTP server credentials and instructions. You can find the encryption key at https://www.visier.com/pgp/visier.public.pgp.asc.  After downloading the file, open the file in a text editor or by dragging it into your browser.   **Note:**   - To see the full status of all analytic tenant data loads, navigate to the Jobs room in a project.   - For performance and efficiency, Visier requires that the uncompressed batch file size is below 5 GB and that no     more than 5000 tenants are included in a batch.
     * @summary Start the data load for an analytic tenant
     * @param {DataAndJobHandlingApiStartLoadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataAndJobHandlingApiGenerated
     */
    public startLoad(requestParameters: DataAndJobHandlingApiStartLoadRequest, options?: AxiosRequestConfig) {
        return DataAndJobHandlingApiFp(this.configuration).startLoad(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
